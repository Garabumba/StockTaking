# Generated by Django 5.0.6 on 2024-06-19 18:52

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('home', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TaskStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='name')),
                ('is_responsible', models.BooleanField(default=False)),
                ('permissions', models.ManyToManyField(blank=True, related_name='custom_group_set', to='auth.permission', verbose_name='permissions')),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='users/%Y/%m/%d/', verbose_name='Фотография')),
                ('patronymic', models.CharField(blank=True, null=True, verbose_name='Отчество')),
                ('computers', models.ManyToManyField(blank=True, related_name='UsersComputers', to='home.computer')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('monitors', models.ManyToManyField(blank=True, related_name='UsersMonitors', to='home.monitor')),
                ('printers', models.ManyToManyField(blank=True, related_name='UsersPrinters', to='home.printer')),
                ('projectors', models.ManyToManyField(blank=True, related_name='UsersProjectors', to='home.projector')),
                ('tvs', models.ManyToManyField(blank=True, related_name='UsersTVs', to='home.tv')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='users.group')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=50)),
                ('message', models.CharField(default='', max_length=500, null=True)),
                ('computer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='home.computer')),
                ('monitor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='home.monitor')),
                ('printer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='home.printer')),
                ('projector', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='home.projector')),
                ('tv', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='home.tv')),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='users.taskstatus')),
            ],
        ),
        migrations.CreateModel(
            name='User_Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner', models.BooleanField()),
                ('task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='users.task')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='task',
            name='users',
            field=models.ManyToManyField(through='users.User_Task', to=settings.AUTH_USER_MODEL),
        ),
    ]
